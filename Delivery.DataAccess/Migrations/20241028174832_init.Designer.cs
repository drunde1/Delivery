// <auto-generated />
using System;
using Delivery.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delivery.DataAccess.Migrations
{
    [DbContext(typeof(DeliveryDbContext))]
    [Migration("20241028174832_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Delivery.DataAccess.Entities.FilterEntity", b =>
                {
                    b.Property<string>("District")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FirstDeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("District", "FirstDeliveryTime");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Delivery.DataAccess.Entities.LogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhereFrom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Delivery.DataAccess.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FilterEntityOrderEntity", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.Property<string>("FiltersDistrict")
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FiltersFirstDeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrdersId", "FiltersDistrict", "FiltersFirstDeliveryTime");

                    b.HasIndex("FiltersDistrict", "FiltersFirstDeliveryTime");

                    b.ToTable("FilterEntityOrderEntity");
                });

            modelBuilder.Entity("FilterEntityOrderEntity", b =>
                {
                    b.HasOne("Delivery.DataAccess.Entities.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delivery.DataAccess.Entities.FilterEntity", null)
                        .WithMany()
                        .HasForeignKey("FiltersDistrict", "FiltersFirstDeliveryTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
